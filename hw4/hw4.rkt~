
#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;; put your code below

;; warm-up part
(define (sequence low high stride)
  (if (> low high)
     null
     (cons low (sequence (+ low stride) high stride))))

(define (string-append-map xs suffix)
  (map (lambda (str) (string-append str suffix)) xs))

(define (list-nth-mod xs n)
  (cond [(< n 0) (error "list-nth-mod: negative number")]
             [(null? xs) (error "list-nth-mod: empty list")]
             [#t (car (list-tail xs (remainder n (length xs))))]))

;; function 4
(define (stream-for-n-steps s n)
  (if (= n 0)
     null
     (let ([pr (s)])
           (cons (car pr) (stream-for-n-steps (cdr pr) (- n 1))))))

;; function 5, produce a stream
(define funny-number-stream
  (letrec ([f (lambda (x)
                (if (= (remainder x 5) 0)
                   (cons (- 0 x) (lambda () (f (+ x 1))))
                   (cons x (lambda () (f (+ x 1))))))])
    (lambda () (f 1))))

;; function 6
(define dan-then-dog
  (letrec ([dan (lambda () (cons "dan.jpg" dog))]
           [dog (lambda () (cons "dog.jpg" dan))])
    dan))

;; function 7
(define (stream-add-zero s)
  (letrec ([f (lambda ()  
                

